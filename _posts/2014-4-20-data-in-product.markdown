---
layout: post
title: 产品中的数据
---
<div id="topic"><img src="/images/posts/data.jpg" alt="data"/></div>
看了下上一篇blog的时间，不知不觉一个半月已经过去了，完全没有什么感觉，除了中间来了场说走就走的大同之旅。

最近公司的事儿挺多的，本来计划五月初上线的一个大项目也推迟了。其实就我个人更喜欢早死早超生一点，因为推迟往往抬高了客户的预期，而且你也不好意思在没有按期完成的情况下再找其他借口去解释为啥推迟了这么久还是一坨翔，不过看起来这次别无选择了。

最近自己还在努力熟悉自己这块的东西，但是总觉得进度好慢，既<span id='edu'>缺乏一个系统层面的全局的认识</span>，又<span id='edu'>对一些细节过目就忘</span>，这种事倍功半的感觉让自己很受挫，但一时也不无可奈何，而且也没时间静下来去反思出现这种问题的原因，直到上周听了首席架构师Jack的一个即兴演讲。

Jack的演讲主要分为四部分：<span id='edu'>Follow the Data</span>、<span id='edu'>One Platform</span>、<span id='edu'>Integrations</span>和<span id='edu'>Operation</span>，按照他自己的说法，这几部分是一个IT系统能run起来，并且持续满足业务需求的全部方面了。虽然我对后面三部分也有点小感触，比如"One Platform"所强调的系统和模块层面的逻辑一致性，但是最大的感触还是数据这一块，这似乎正是我最近迷茫的根源，其他三部分以后有机会再展开。

最近两年几乎所有互联网产品都在强调用户，可用户的本质是什么？<span id='edu'>用户的本质其实就是数据</span>。用户对系统来说，就是可持续产生高维数据的元数据，这也就解释了机器人、僵尸粉等的存在，他们是地地道道的数据，之所以看起来怪怪的而容易被发现，是因为<span id='edu'>这些数据的维度还不够高</span>，批量的行为总是产生<span id='edu'>规律</span>，而这规律就是他们一出生就打在身上的烙印，当然这个话题再深入就可以扯到机器和人的差异等伦理学话题了。

从整个产品的层面往下，到<span id='edu'>系统级别</span>，数据的王者地位就更显而易见了。前端或绚丽或简洁的页面，无不是为了吸引用户。按照我上一段的说法，<span id='edu'>用户即数据产生器</span>，所以任何IT系统的前端界面的终极目的就是为了给整个产品尽可能带来更多的数据输入。好的前端和坏的前端的区别就在于<span id='edu'>前者能通过各种人性化手段，或揣摩人的心理，或利用人性的弱点，得到更多更高质量的输入数据</span>。根据常见的MVC架构，View后面就是Control了，也就是控制层或者逻辑层，这部分可以认为是<span id='edu'>从业务角度看数据</span>，前端带来的数据作为输入，逻辑层根据整个系统的业务逻辑，决定产生什么输出给前端，进而展示给用户。如果说前端是系统的脸面，那这部分可以认为是整个系统的大脑，其最大的敌人总是逻辑复杂性，因为用户的输入总是千奇百怪，需求变幻莫测，怎么样控制业务分支不爆炸性增长既是一个设计问题，也是一个实现问题，而且通常还还需要两者结合来解决。当然，从开发者的角度来说，理解业务复杂性最好的办法就是<span id='edu'>跟随数据流（Follow the Data）</span>，因为抛开云雾缭绕的逻辑大山，数据流总是一个更好的观察对象。数据流不会说谎，甚至不会说太多没用的，<span id='edu'>它出现则它必有前因后果</span>，当你发现一个看上去没用的数据的时候，99%的情况是你漏过了某些特殊的情况。最后是Model层，这部分是<span id='edu'>从实现角度看数据</span>，它的主要目的是提供一个更方便逻辑层的数据建模，通常为了满足<span id='edu'>存储空间（Size）</span>、<span id='edu'>响应时间（Latency）</span>和<span id='edu'>存取方便（Access）</span>等几个需求。这部分没啥好说的，通常是以类库、数据库的形式存在，<span id='edu'>数据的属性</span>和<span id='edu'>数据与数据之间的关系</span>已经很赤裸裸了，为了方便，每个建模通常又会对应一个或部分（为了解耦）业务概念，所以这部分是也是理解业务的一个很好的补充。

从系统系别再往下，就是模块和函数了，这部分通常就是逻辑层的细节了。在这个层面，到处都是数据的输入输出，满目望去都是管子，一个连着一个，有的新、有的旧、有的粗、有的细、有的很长一段都是直的，有的则各种分支，不过不管你是面向过程还是面向对象，哪怕是面向函数，<span id='edu'>唯一不变的还是数据流</span>，你可以有一百种方法，但是在某个特定的输入下，必须得到对应的输出，否则——否则QA就会找你了。

吹了半天数据，我到底想说明什么呢？

## 1.Data is Everthing. 
## 2.Data is the Door.

所以下个阶段准备转变策略，在<span id='edu'>关注代码实现细节之前</span>，先从<span id='edu'>数据流角度</span>把握整个系统，希望能获得事半功倍的效果。


